create table College(cName varchar2(10) primary key, state
varchar2(10), enrollment int);
create table Student(sID int primary key, sName varchar2(10), GPA
real, sizeHS int, DoB date);
create table Apply(sID int, cName varchar2(10), major varchar2(20),
decision char(1), primary key(sID, major, cName), constraint sID_fk
Foreign key(sID) references Student, constraint cName_fk Foreign
key(cName) references College);
insert into Student values (123, 'Amy', 3.9, 1000);
insert into Student values (234, 'Bob', 3.6, 1500);
insert into Student values (345, 'Craig', 3.5, 500);
insert into Student values (456, 'Doris', 3.9, 1000);
insert into Student values (567, 'Edward', 2.9, 2000);
insert into Student values (678, 'Fay', 3.8, 200);
insert into Student values (789, 'Gary', 3.4, 800);
insert into Student values (987, 'Helen', 3.7, 800);
insert into Student values (876, 'Irene', 3.9, 400);
insert into Student values (765, 'Jay', 2.9, 1500);
insert into Student values (654, 'Amy', 3.9, 1000);
insert into Student values (543, 'Craig', 3.4, 2000);
insert into College values ('Stanford', 'CA', 15000);
insert into College values ('Berkeley', 'CA', 36000);
insert into College values ('MIT', 'MA', 10000);
insert into College values ('Cornell', 'NY', 21000);
insert into College values ('Harvard', 'MA', 50040);
insert into Apply values (123, 'Stanford', 'CS', 'Y');
insert into Apply values (123, 'Stanford', 'EE', 'N');
insert into Apply values (123, 'Berkeley', 'CS', 'Y');
insert into Apply values (123, 'Cornell', 'EE', 'Y');
insert into Apply values (234, 'Berkeley', 'biology', 'N');
insert into Apply values (345, 'MIT', 'bioengineering', 'Y');
insert into Apply values (345, 'Cornell', 'bioengineering', 'N');
insert into Apply values (345, 'Cornell', 'CS', 'Y');
insert into Apply values (345, 'Cornell', 'EE', 'N');
insert into Apply values (678, 'Stanford', 'history', 'Y');
insert into Apply values (987, 'Stanford', 'CS', 'Y');
insert into Apply values (987, 'Berkeley', 'CS', 'Y');
insert into Apply values (876, 'Stanford', 'CS', 'N');
insert into Apply values (876, 'MIT', 'biology', 'Y');
insert into Apply values (876, 'MIT', 'marine biology', 'N');
insert into Apply values (765, 'Stanford', 'history', 'Y');
insert into Apply values (765, 'Cornell', 'history', 'N');
insert into Apply values (765, 'Cornell', 'psychology', 'Y');
insert into Apply values (543, 'MIT', 'CS', 'N');
select * from Student;
select * from College;
select * from Apply;

-- Q1. Create a new column DoB in Student table. (Datatype will be date)
alter table Student add Dob date
select * from Student;


-- Q2. Insert DoB for each Student in corresponding table using above instance of Student
-- table.
drop table Student
create table Student(sID int primary key, sName varchar2(10), GPA
real, sizeHS int, DoB date);
insert into Student values (123, 'Amy', 3.9, 1000,'26-JUN-96');
insert into Student values (234, 'Bob', 3.6, 1500,'7-Apr-95');
insert into Student values (345, 'Craig', 3.5, 500,'4-Feb-95');
insert into Student values (456, 'Doris', 3.9, 1000,'24-Jul-97');
insert into Student values (567, 'Edward', 2.9, 2000,'21-Dec-96');
insert into Student values (678, 'Fay', 3.8, 200,'27-Aug-96');
insert into Student values (789, 'Gary', 3.4, 800,'8-Oct-96');
insert into Student values (987, 'Helen', 3.7, 800,'27-Mar-97');
insert into Student values (876, 'Irene', 3.9, 400,'7-Mar-96');
insert into Student values (765, 'Jay', 2.9, 1500,'8-Aug-98');
insert into Student values (654, 'Amy', 3.9, 1000,'26-May-96');
insert into Student values (543, 'Craig', 3.4, 2000,'27-Aug-98');


-- Q3. Find average of GPA round off to 2 decimal places.
select round(avg(gpa),2) from Student

-- Q4. Find year of DoB of Student having less than 1000.
select extract(year from dob) from Student where extract(year from dob) < 1000

-- Q5. Compute Age of each student. (Hint: take difference between year of sysdate and
-- Student’s DoB)
select sid,sname,(extract(year from sysdate) - extract(year from dob)) as Age from Student

-- Q6. Display name of all Students in uppercase and name of college they applied in lower
-- case.
select upper(sname),upper(cname) from Student right join Apply on Student.sid = Apply.sid

-- Q7. Find fourth alphabet of each student. (Hint: use substring)
select substr(sname,4,1) from Student

-- Q8. Find sID and sName of student whose sName has string length greater than 3.
select sid,sname from Student where length(sname) > 3

-- Q9. Find floor, ceiling and truncate (to one decimal place) value of average GPA.
select floor(avg(gpa)),ceil(avg(gpa)),trunc(avg(gpa),1) from Student

-- Q10. Display details of all students whose sID is even.
select * from Student where mod(sid,2) = 0

-- Q11. Compute Square Root of 900 and 247.
select sqrt(900),sqrt(247) from dual

-- Q12. Consider the string “Peter Piper picked a peck of pickled peppers. A peck of pickled
-- peppers Peter Piper picked. If Peter Piper picked a peck of pickled peppers, Where the
-- peck of pickled peppers Peter Piper picked?”
-- Find 6th occurrence of string ‘pick’. (Hint: use INSTR)
select instr('Peter Piper picked a peck of pickled peppers. A peck of pickled peppers Peter Piper picked.If Peter Piper picked a peck of pickled peppers, Where thepeck of pickled peppers Peter Piper picked?','pick',3,6) 
from dual


-- Q13. Consider String ‘Satya Nadella’ replace this using the key (Hint: use translate)
-- a d e l N S t y
-- 1 2 3 4 5 6 7 8
select translate('Satya Nadella','adelNSty',12345678) from dual


-- Q14. Display sID, sname and DoB in this format ‘February 26, 2014’
select sid,sname,to_char(Dob,'Month dd, yyyy') from Student



-- Q15. Convert the text ’26/02/2014’ to date.
select to_date('26/02/2014','dd/mm/yyyy') from dual


-- Q16. Compute on which date is next Saturday and last day of this month?
select next_day(sysdate,'Saturday')as nextSaturday,extract(day from last_day(sysdate))as lastDay from dual
